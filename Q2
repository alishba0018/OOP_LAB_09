#include <iostream>
using namespace std;

class SmartDevice {
public:
    virtual void turnOn() = 0;
    virtual void turnOff() = 0;
    virtual void getStatus() const = 0;
    virtual ~SmartDevice() {}
};

class LightBulb : public SmartDevice {
private:
    bool isOn;
    int brightness; 
public:
    LightBulb() : isOn(false), brightness(0) {}
    void turnOn() override {
        isOn = true;
        brightness = 75; 
        cout << "LightBulb turned ON.\n";
    }
    void turnOff() override {
        isOn = false;
        brightness = 0;
        cout << "LightBulb turned OFF.\n";
    }
    void getStatus() const override {
        cout << "LightBulb is " << (isOn ? "ON" : "OFF") 
             << " Brightness: " << brightness << "%\n";
    }
};

class Thermostat : public SmartDevice {
private:
    bool isOn;
    double temperature; 
public:
    Thermostat() : isOn(false), temperature(0.0) {}
    void turnOn() override {
        isOn = true;
        temperature = 72.0; 
        cout << "Thermostat turned ON.\n";
    }
    void turnOff() override {
        isOn = false;
        temperature = 0.0;
        cout << "Thermostat turned OFF.\n";
    }
    void getStatus() const override {
        cout << "Thermostat is " << (isOn ? "ON" : "OFF")
             << " Temp Setting: " << (isOn ? to_string(temperature) : "N/A") << "\n";
    }
};
int main() {
    const int numDevices = 2;
    SmartDevice* devices[numDevices];
    devices[0] = new LightBulb();
    devices[1] = new Thermostat();
    for (int i = 0; i < numDevices; ++i) {
        devices[i]->turnOn();
        devices[i]->getStatus();
    }
    cout << "\nTurning everything OFF...\n\n";
    for (int i = 0; i < numDevices; ++i) {
        devices[i]->turnOff();
        devices[i]->getStatus();
    }
    for (int i = 0; i < numDevices; ++i) {
        delete devices[i];
    }
    return 0;
}
